note
	description: "Summary description for {ENEMY}."
	author: ""
	date: "$Date$"
	revision: "$Revision$"

class
	ENEMY
inherit
	VEHICLE
	redefine
		make,move_action
	end

create
	make
feature --attributes
	--row and col are the coordinate
	--r1 is the amount of health can gain per turn, can not exceed max
	--r2 is the energy can gain per turn, can not exceed max
	--power is the only way that health can exceed max health
	--enemy's regen can only recover health
	--i will be generated by rng, from 1 to r(board's row), determines which row the enemy will spawn on last column
	--j random from 1 to 100,if j within threshold, different enemy will spawn
	points:INTEGER
	enemy_id:INTEGER
	enemy_type:STRING
	enemy_move:INTEGER
	just_created_by_C:BOOLEAN
	symbol:STRING
	seen_by_Starfighter,can_see_Starfighter:BOOLEAN
	enemy_projectiles:ARRAY[PROJECTILE]
	pre_action:BOOLEAN
	stop_move:BOOLEAN
	collision_m:STRING
	orb:ORB
feature--queries
	distance(e:VEHICLE;s:VEHICLE):INTEGER
		local
			diff_row,diff_col:INTEGER
		do
			model:=ma.m
			diff_row := e.row-s.row
			diff_col:=e.col-s.col
			diff_row:=diff_row.abs
			diff_col:=diff_col.abs
			result:=diff_row+diff_col
		end

	check_collide_from_spawn:STRING
	local
		enemy_action:ENEMY_ACTION
	do
		model:=ma.m
		create enemy_action.make_empty
		result:=""
		across
			model.round.enemys is es
		loop
			across
				es.enemy_projectiles is ps
			loop
				if(ps.row=row and ps.col=col and ps.damage>0) then
					if(maxhealth-health>0 and maxhealth-health>=ps.damage) then
						inc_health(ps.damage)
					elseif(maxhealth-health>0 and maxhealth-health<ps.damage)then
						set_health(maxhealth)
					end
					enemy_action.set_collide_with_enemy_p_from_espawn(ps.id, ps.damage, current)
					ps.set_damage(0)
					result:="%N"+enemy_action.print_action
				end
			end
		end

		across
			model.starfighter.starfightr_projectiles is ps
		loop
			if(ps.row=row and ps.col=col and ps.damage>0) then
				set_health(health-(ps.damage-armour))
				enemy_action.set_collide_with_friendly_p_fromespawn(ps.id, ps.damage-armour, current)
				result:="%N"+enemy_action.print_action

				if(health<=0) then
					enemy_action.set_destroy_from_e_spawn (current, row, col)
					result:=result+"%N"+enemy_action.print_action
--					model.starfighter.set_score (points)
				end
				ps.set_damage(0)
			end
		end

		if(row=model.starfighter.row and col=model.starfighter.col) then
			set_health(0)
			enemy_action.set_destroy_from_e_spawn (current, row, col)
			RESULT:="%N"+enemy_action.print_action
			model.starfighter.set_health (model.starfighter.health-health)
			if(model.starfighter.health<=0) then
				model.starfighter.set_health (0)
				result:=result+"%N"+(create {ENEMY_ACTION}.starfighter_destroy_from_enemy_spawn (row, col)).print_action
--				model.starfighter.set_score (points)
			end
		end


	end
	--see if the enemy still on board
	if_onboard:BOOLEAN
	do
		result:=(row>=1 and row<=model.warzone.row and col>=1 and col<=model.warzone.col)
	end


	set_just_created_by_c(b:BOOLEAN)
	do
		just_created_by_C:=b
	end
	act(s:STRING)
	do

	end
	clean
	do
		create enemy_projectiles.make_empty
	end

	output:STRING
	do
		result:="["+model.enemy_id.out+","+enemy_type+"]->health:"+health.out+"/"+maxhealth.out+",Regen:"+r1.out+",Vision:"+vision.out+
		",seen_by_Starfighter:"+print_tf(seen_by_Starfighter)+",can_see_Starfighter"+print_tf(can_see_Starfighter)+",location:["+alphabit.at(row)+","
		+col.out+"]%N"
	end

	print_tf(bb:BOOLEAN):STRING
	do
		result:=""
		if(bb=true) then result:="T"end
		if(bb=false) then result:="F"end
	end

feature --commands
	pre_act(s:STRING)
	do

	end
	set_enemy_move(mm:INTEGER)
		do
			enemy_move:=mm
		end
	make(locate_row,locate_col,po:INTEGER;p_t:STRING;p_d,p_c:INTEGER)

		do


			create enemy_projectiles.make_empty
			create symbol.make_empty
			alphabit:=<<"A","B","C","D","E","F","G","H","I","J">>
			row:=locate_row
			col:=locate_col
			power:=po
			model:=ma.m
			create enemy_type.make_empty
			create projectile.make (p_t, p_d, p_c)
			collision_m:=""
			create orb.make
		end

	add_projectile(p:PROJECTILE)
		do
			enemy_projectiles.force (p, enemy_projectiles.count+1)
		end

	set_seen_by_starfighter(b:BOOLEAN)
	do
		seen_by_Starfighter:=b
	end
	set_can_see_starfighter(b:BOOLEAN)
	do
		can_see_Starfighter:=b
	end

	set_pre_action(b:BOOLEAN)
	do
		pre_action:=b
	end

	--move
	move_action(desrowa:INTEGER;descola:INTEGER)
		local
			i,desrow,descol,diff_col,diff_row,count:INTEGER
			enemy_moving:ENEMY_ACTION
		do
			collision_m:=""
			create enemy_moving.make_empty
			col_before:=col
			row_before:=row
			desrow:=desrowa
			descol:=descola
			diff_col:=descol-col
			diff_col:=diff_col.abs
			diff_row:=desrow-row
			diff_row:=diff_row.abs
			count:=diff_row+diff_col

			if(desrowa-row > 0) then
				from
					i:=1
				until
					i>diff_row or health<=0
				loop

					if(check_if_e_ahead(row+1,col)=false) then
					startr_inc
					end
					i:=i+1

					checkcollide(row,col)
				end
			elseif(desrowa-row < 0) then
				from
					i:=1
				until
					i>diff_row or health<=0
				loop
					if(check_if_e_ahead(row-1,col)=false) then
					startr_dec
					end
					i:=i+1

					checkcollide(row,col)
				end

			end --end of if
			if(descola-col > 0) then
				from
					i:=1
				until
					i>diff_col or health<=0
				loop
					if(check_if_e_ahead(row,col+1)=false) then
					startc_inc
					end
					i:=i+1
					checkcollide(row,col)
				end
			elseif(descola-col < 0) then
				from
					i:=1
				until
					i>diff_col or health<=0
				loop
					if(check_if_e_ahead(row,col-1)=false) then
					startc_dec
					end
					i:=i+1
					checkcollide(row,col)
				end
			end --end of if

			enemy_moving.set_before_rc (row_before, col_before)
			enemy_moving.set_rc (row, col)
			enemy_moving.set_state ("moves")
			enemy_moving.set_enemy (current)
			if(pre_action=true) then
				model.set_enemy_pre_action (enemy_moving.print_action)
				model.set_enemy_pre_action (collision_m)
			elseif(pre_action=false) then
				model.set_enemy_action (enemy_moving.print_action)
				model.set_enemy_action (collision_m)
			end
			if(if_onboard=false) then
				health:=0
			end
		end

	check_if_e_ahead(r,c:INTEGER):BOOLEAN
	do
		across
			model.round.enemys is es
		loop
			if(es/=current and es.row=r and es.col=c and es.health>0 and es.if_onboard=true) then
				result:=true
			end
		end
	end

	checkcollide(r,c:INTEGER)
	local
		enemy_a,enemy_a2,enemy_des,enemy_moving:ENEMY_ACTION
	do
		--case 1:if collide with starfighter projectiles
		create enemy_a.make_empty
		create enemy_a2.make_empty
		create enemy_des.make_empty
		create enemy_moving.make_empty
		across
			model.starfighter.starfightr_projectiles is ps
		loop
			if(ps.row=row and ps.col=col and ps.damage>0) then

				if(ps.damage >= armour) then
					current.dec_health (ps.damage-armour)
					--set enemy action
					enemy_a.set_collide_with_friendly_p(ps.id,ps.damage-armour,current)

					collision_m:=collision_m+enemy_a.print_action
					--end set enmy action
					if(health<=0) then
--						model.starfighter.set_score (model.starfighter.score+points)
						enemy_des.set_destroy (current, row, col)
						collision_m:=collision_m+enemy_des.print_action
					end
				elseif(ps.damage < armour) then
					--set enemy action
					enemy_a.set_collide_with_friendly_p(ps.id,0,current)
					collision_m:=collision_m+enemy_a.print_action
					--end set enmy action
				end
				--set projectile damage to 0
				ps.set_damage(0)

			end
		end

		--case 2:if collide with eney projectiles
		across
			model.round.enemys is es
		loop
			across
				es.enemy_projectiles is ps
			loop
				if(ps.row=row and ps.col=col and ps.damage>0) then
					if(maxhealth-health>=ps.damage) then
						inc_health(ps.damage)
					ELSEif(maxhealth-health<ps.damage and maxhealth-health>0) then
						inc_health(maxhealth-health)
					end

					enemy_a2.set_collide_with_enemy_p (ps.id, ps.damage, current)
					collision_m:=collision_m+enemy_a2.print_action
					ps.set_damage(0)
				end
			end
		end

		--case 3:collide with starfighter
		if(row=model.starfighter.row and col=model.starfighter.col) then
			model.starfighter.dec_health (health)
			collision_m:=collision_m+(create {ENEMY_ACTION}.collide_with_starfighter (CURRENT)).print_action
			enemy_a2.set_destroy (current, row, col)
			collision_m:=collision_m+enemy_a2.print_action
			health:=0
			if(model.starfighter.health<=0) then
				collision_m:=collision_m+(create {ENEMY_ACTION}.starfighter_destroy (row, col)).print_action
				model.starfighter.set_health (0)
--				model.starfighter.set_score (model.starfighter.score+points)
			end
		end

	end

end
